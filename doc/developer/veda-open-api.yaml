openapi: '3.0.0'
info:
  title: Veda Platform HTTP Interface
  version: '1.0'
  description: API for interacting with the Veda platform services.

servers:
  - url: 'http://example.com/api'  # Replace with your actual API base path

paths:

 # Authentication endpoint to retrieve user ticket (session).
  /authenticate:
    get:
      summary: Authenticate User
      description: Authenticates a user with login and password, and optionally a secret.
      parameters:
        - in: query
          name: login
          required: true
          schema:
            type: string
          description: User's login name.
        - in: query
          name: password
          required: true
          schema:
            type: string
          description: User's password in hashed format.
        - in: query
          name: secret
          required: false
          schema:
            type: string
          description: Optional secret key for additional security.
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_time:
                    type: integer
                    format: int64
                    description: The end time of the authentication session.
                  id:
                    type: string
                    format: uuid
                    description: The unique identifier for the authenticated session.
                  result:
                    type: integer
                    description: The result code for the authentication process.
                  user_uri:
                    type: string
                    description: The URI for the authenticated user.
        '472':
          description: Custom error response
        '500':
          description: Internal Server Error

  # Check if the provided ticket is still valid.
  /is_ticket_valid:
    get:
      summary: Check Ticket Validity
      description: >
        This endpoint checks if the provided ticket is valid.
        The ticket is passed as a query parameter.
      operationId: checkTicketValidity
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the ticket.
        schema:
          type: string
          example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
      responses:
        '200':
          description: Indicates that the ticket is valid.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '472':
          description: Custom error indicating a specific failure in ticket validation.
        '500':
          description: General server error indicating that the request could not be processed.

  # Get a ticket trusted for use by another user, based on an existing ticket.
  /get_ticket_trusted:
    get:
      summary: Get Ticket for Another User
      description: >
        This endpoint retrieves a ticket for another user. It requires both 
        the ticket of the requesting user and the login of the user for whom 
        the ticket is being requested.
      operationId: getTicketForUser
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the requesting user's ticket.
        schema:
          type: string
          example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
      - name: login
        in: query
        required: true
        description: The login identifier of the user for whom the ticket is being requested.
        schema:
          type: string
          example: milliganb
      responses:
        '200':
          description: A successful response providing the ticket information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_time:
                    type: integer
                    format: int64
                    example: 636858783968916000
                  id:
                    type: string
                    example: a7e13ad5-f846-4f8f-8543-aceda5fc4718
                  result:
                    type: integer
                    example: 200
                  user_uri:
                    type: string
                    example: td:MilliganBilly
        '473':
          description: Custom error indicating a specific failure in processing the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_time:
                    type: integer
                    format: int64
                    example: 0
                  id:
                    type: string
                    example: ""
                  result:
                    type: integer
                    example: 473
                  user_login:
                    type: string
                    example: ""
                  user_uri:
                    type: string
                    example: ""
        '500':
          description: General server error indicating that the request could not be processed.

  # Execute a full text search query against the stored data.
  /query:
    post:
      summary: Execute Full Text Query
      description: >
        This endpoint allows users to execute a full text query. It requires a ticket 
        and a query string, and supports various optional parameters to refine the search.
      operationId: executeFullTextQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                query:
                  type: string
                  description: The full text query string.
                  example: "( 'rdf:type'=='v-s:UserThing' ) && ( '*' == '+персона' )"
                sort:
                  type: string
                  description: Optional parameter to specify sorting.
                  example: "'v-s:created' desc"
                databases:
                  type: string
                  description: Optional parameter to specify databases.
                reopen:
                  type: boolean
                  description: Optional flag to reopen the query.
                from:
                  type: integer
                  description: Optional parameter to specify the starting point.
                top:
                  type: integer
                  description: Optional parameter to specify the top limit.
                limit:
                  type: integer
                  description: Optional parameter to specify the limit on results.
                trace:
                  type: boolean
                  description: Optional flag to enable tracing.
              required:
                - ticket
                - query
      responses:
        '200':
          description: A successful response returning the query results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: string
                    example: ["cfg:Administrator", "td:AleksandraKhvostikova", "td:RomanKarpov", "td:ValeriyBushenev", "td:AndreyBychin"]
                  count:
                    type: integer
                    example: 5
                  estimated:
                    type: integer
                    example: 5
                  processed:
                    type: integer
                    example: 5
                  cursor:
                    type: integer
                    example: 5
                  result_code:
                    type: integer
                    example: 200
        '400':
          description: Bad request error indicating issues with input parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: string
                    example: []
                  count:
                    type: integer
                    example: 0
                  estimated:
                    type: integer
                    example: 0
                  processed:
                    type: integer
                    example: 0
                  cursor:
                    type: integer
                    example: 0
                  result_code:
                    type: integer
                    example: 400
        '500':
          description: General server error indicating that the request could not be processed.

  /get_individual:
    get:
      summary: Get One Individual
      description: >
        This endpoint retrieves information about a specific individual based 
        on their unique identifier (URI). It requires a user ticket and the 
        individual's URI, and optionally allows reopening the query.
      operationId: getIndividual
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the user's ticket.
        schema:
          type: string
          example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
      - name: uri
        in: query
        required: true
        description: The unique identifier (URI) of the individual.
        schema:
          type: string
          example: v-ui:DefaultLanguage
      - name: reopen
        in: query
        required: false
        description: Optional flag to reopen the query.
        schema:
          type: boolean
      responses:
        '200':
          description: A successful response containing the information of the individual.
          content:
            application/json:
              schema:
                type: object
                example: { "@": "v-ui:DefaultLanguage", "rdf:type": [{"data": "rdfs:Resource", "type": "Uri"}], "rdf:value": [{"data": "v-ui:RU", "type": "Uri"}], "rdfs:label": [{"data": "Язык по-умолчанию", "lang": "RU", "type": "String"}, {"data": "Default language", "lang": "EN", "type": "String"}], "v-s:updateCounter": [{"data": 1, "type": "Integer"}]}
        '473':
          description: Custom error indicating a specific failure in retrieving the individual.
        '500':
          description: General server error indicating that the request could not be processed.

  /get_individuals:
    post:
      summary: Get More Individuals
      description: >
        This endpoint retrieves information about multiple individuals based on their 
        unique identifiers (URIs). It requires a user ticket and an array of URIs, 
        and optionally allows reopening the query.
      operationId: getMultipleIndividuals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                uris:
                  type: array
                  items:
                    type: string
                  description: An array of unique identifiers (URIs) of the individuals.
                  example: ["v-s:WelcomeToVeda", "v-s:VedaDescription"]
                reopen:
                  type: boolean
                  description: Optional flag to reopen the query.
              required:
                - ticket
                - uris
      responses:
        '200':
          description: A successful response containing the information of the individuals.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example: [{"@":"v-s:WelcomeToVeda", "rdf:type":[{"data":"v-s:Bundle", "type":"Uri"}], "rdfs:label":[{"data":"Добро пожаловать в Veda!", "lang":"RU", "type":"String"}, {"data":"Welcome to Veda!", "lang":"EN", "type":"String"}], "v-s:updateCounter":[{"data":1, "type":"Integer"}]}, {"@":"v-s:VedaDescription", "rdf:type":[{"data":"v-s:Bundle", "type":"Uri"}], "rdfs:label":[{"data":"Платформа для разработки web-приложений уровня предприятий.", "lang":"RU", "type":"String"}, {"data":"Enterprise application development platform.", "lang":"EN", "type":"String"}], "v-s:updateCounter":[{"data":1, "type":"Integer"}]}]
        '500':
          description: General server error indicating that the request could not be processed.

  /put_individual:
    put:
      summary: Put One Individual
      description: >
        This endpoint updates or inserts information about an individual. 
        It requires a user ticket and the individual object, with optional 
        parameters for event handling and transaction control.
      operationId: putIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                individual:
                  type: object
                  description: The individual object to be updated or inserted.
                  example: {"@":"v-s:Welcome", "rdf:type":[{"data":"v-s:WelcomeAspect", "type":"Uri"}], "rdfs:label":[{"data":"Добро пожаловать", "lang":"RU", "type":"String"}, {"data":"Welcome", "lang":"EN", "type":"String"}], "v-s:updateCounter":[{"data":1, "type":"Integer"}]}
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - individual
      responses:
        '200':
          description: A successful response indicating the operation's result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 12246
                  result:
                    type: integer
                    example: 200
        '473':
          description: Custom error indicating a specific failure in processing the individual.
        '500':
          description: General server error indicating that the request could not be processed.


  /put_individuals:
    put:
      summary: Put More Individuals
      description: >
        This endpoint updates or inserts information about multiple individuals. 
        It requires a user ticket and an array of individual objects, with optional 
        parameters for event handling and transaction control.
      operationId: putMultipleIndividuals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                individuals:
                  type: array
                  items:
                    type: object
                  description: An array of individual objects to be updated or inserted.
                  example: [{"@":"v-s:Welcome", "rdf:type":[{"data":"v-s:WelcomeAspect", "type":"Uri"}], "rdfs:label":[{"data":"Добро пожаловать", "lang":"RU", "type":"String"}, {"data":"Welcome", "lang":"EN", "type":"String"}], "v-s:updateCounter":[{"data":1, "type":"Integer"}]}]
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - individuals
      responses:
        '200':
          description: A successful response indicating the operation's result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 12246
                  result:
                    type: integer
                    example: 200
        '400':
          description: Bad request error indicating issues with input parameters.

  /remove_individual:
    put:
      summary: Remove One Individual
      description: >
        This endpoint removes information about a specific individual. 
        It requires a user ticket and the URI of the individual, with optional 
        parameters for event handling and transaction control.
      operationId: removeIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                uri:
                  type: string
                  description: The unique identifier (URI) of the individual to be removed.
                  example: v-s:Welcome
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - uri
      responses:
        '200':
          description: A successful response indicating the result of the removal operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 12236
                  result:
                    type: integer
                    example: 200
        '473':
          description: Custom error indicating a specific failure in the removal process.
        '500':
          description: General server error indicating that the request could not be processed.

  /remove_from_individual:
    put:
      summary: Remove Field from Individual
      description: >
        This endpoint removes a specific field from the information of an individual.
        It requires a user ticket and the individual's URI, along with the details of the field to be removed, 
        and supports optional parameters for event handling and transaction control.
      operationId: removeFieldFromIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                uri:
                  type: string
                  description: The unique identifier (URI) of the individual.
                  example: v-s:Welcome
                individual:
                  type: object
                  description: An object representing the individual with the field to be removed.
                  example: {"@":"v-s:Welcome", "v-s:updateCounter":[{"data":1, "type":"Integer"}]}
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - uri
      responses:
        '200':
          description: A successful response indicating the result of the removal operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 12236
                  result:
                    type: integer
                    example: 200
        '473':
          description: Custom error indicating a specific failure in the removal process.
        '500':
          description: General server error indicating that the request could not be processed.

  /set_in_individual:
    put:
      summary: Set Field into Individual
      description: >
        This endpoint sets or updates a specific field in the information of an individual.
        It requires a user ticket and the individual's URI, along with the details of the field to be set or updated,
        and supports optional parameters for event handling and transaction control.
      operationId: setFieldInIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                uri:
                  type: string
                  description: The unique identifier (URI) of the individual.
                  example: v-s:Welcome
                individual:
                  type: object
                  description: An object representing the individual with the field to be set or updated.
                  example: {"@":"v-s:Welcome", "rdfs:comment":[{"data":"Hello!", "type":"String"}]}
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - uri
      responses:
        '200':
          description: A successful response indicating the result of the set/update operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 11236
                  result:
                    type: integer
                    example: 200
        '473':
          description: Custom error indicating a specific failure in the set/update process.
        '500':
          description: General server error indicating that the request could not be processed.

  /add_to_individual:
    put:
      summary: Add Field into Individual
      description: >
        This endpoint adds a specific field to the information of an individual.
        It requires a user ticket and the individual's URI, along with the details of the field to be added,
        and supports optional parameters for event handling and transaction control.
      operationId: addFieldToIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The unique identifier of the user's ticket.
                  example: f04f82a4-a7c2-4545-ba6c-b20f7022ca5c
                uri:
                  type: string
                  description: The unique identifier (URI) of the individual.
                  example: v-s:Welcome
                individual:
                  type: object
                  description: An object representing the individual with the field to be added.
                  example: {"@":"v-s:Welcome", "rdfs:comment":[{"data":"Приветствуем!", "type":"String"}]}
                prepare_events:
                  type: boolean
                  description: Optional flag to prepare events.
                assigned_subsystems:
                  type: integer
                  format: byte
                  description: Optional byte value for assigned subsystems.
                event_id:
                  type: string
                  description: Optional event identifier.
                transaction_id:
                  type: string
                  description: Optional transaction identifier.
              required:
                - ticket
                - uri
      responses:
        '200':
          description: A successful response indicating the result of the addition operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  op_id:
                    type: integer
                    example: 11237
                  result:
                    type: integer
                    example: 200
        '473':
          description: Custom error indicating a specific failure in the addition process.
        '500':
          description: General server error indicating that the request could not be processed.

  /get_rights:
    get:
      summary: Get Access Rights on URI
      description: >
        This endpoint retrieves the access rights for a specific URI.
        It requires a user ticket and the URI for which the rights are being queried.
      operationId: getAccessRights
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the user's ticket.
        schema:
          type: string
          example: b4f99ee5-c1d2-4f0c-9a14-30f6fd7e9f5c
      - name: uri
        in: query
        required: true
        description: The unique identifier (URI) for which the rights are being queried.
        schema:
          type: string
          example: v-s:Welcome
      responses:
        '200':
          description: A successful response containing the access rights of the specified URI.
          content:
            application/json:
              schema:
                type: object
                properties:
                  '@':
                    type: string
                    example: "_"
                  'rdf:type':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: string
                        type:
                          type: string
                    example: [{"data":"v-s:PermissionStatement", "type":"Uri"}]
                  'v-s:canCreate':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: boolean
                        type:
                          type: string
                    example: [{"data":true, "type":"Boolean"}]
                  'v-s:canDelete':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: boolean
                        type:
                          type: string
                    example: [{"data":true, "type":"Boolean"}]
                  'v-s:canRead':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: boolean
                        type:
                          type: string
                    example: [{"data":true, "type":"Boolean"}]
                  'v-s:canUpdate':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: boolean
                        type:
                          type: string
                    example: [{"data":true, "type":"Boolean"}]
        '500':
          description: General server error indicating that the request could not be processed.
          
  /get_rights_origin:
    get:
      summary: Get Origin of Access Rights on URI
      description: >
        This endpoint retrieves information about the origin of access rights for a specific URI.
        It requires a user ticket and the URI for which the rights origins are being queried.
      operationId: getRightsOrigin
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the user's ticket.
        schema:
          type: string
          example: b4f99ee5-c1d2-4f0c-9a14-30f6fd7e9f5c
      - name: uri
        in: query
        required: true
        description: The unique identifier (URI) for which the rights origins are being queried.
        schema:
          type: string
          example: v-s:Welcome
      responses:
        '200':
          description: A successful response containing the origins of the access rights of the specified URI.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example: [{"@": "_", "rdf:type": [{"data": "v-s:PermissionStatement", "type": "Uri"}], "v-s:canRead": [{"data": true, "type": "Boolean"}], "v-s:permissionObject": [{"data": "v-s:AllResourcesGroup", "type": "Uri"}], "v-s:permissionSubject": [{"data": "cfg:SuperUser", "type": "Uri"}]}, {"@": "_", "rdf:type": [{"data": "v-s:PermissionStatement", "type": "Uri"}], "v-s:canUpdate": [{"data": true, "type": "Boolean"}], "v-s:permissionObject": [{"data": "v-s:AllResourcesGroup", "type": "Uri"}], "v-s:permissionSubject": [{"data": "cfg:SuperUser", "type": "Uri"}]}, {"@": "_", "rdf:type": [{"data": "v-s:PermissionStatement", "type": "Uri"}], "rdfs:comment": [{"data": "1 authorize uri=v-s:Welcome, user=cfg:Administrator, request_access=C R U D \n2 calc_bits=C , res=C \n3 OBJECT\n4 SUBJECT-\u003ecfg:SuperUser\n5 calc_bits=R , res=C R \n6 OBJECT\n7 SUBJECT\n8 calc_bits=U , res=C R U \n9 OBJECT\n10 SUBJECT\n11 calc_bits=D , res=C R U D \n12 OBJECT\n13 SUBJECT\n14 result: uri=v-s:Welcome, user=cfg:Administrator, request=C R U D , answer=C R U D \n\n", "lang": "NONE", "type": "String"}], "v-s:permissionSubject": [{"data": "?", "type": "Uri"}]}]
        '500':
          description: General server error indicating that the request could not be processed.

  /get_membership:
    get:
      summary: Get Membership of URI
      description: >
        This endpoint retrieves membership information of a specific URI.
        It requires a user ticket and the URI for which the membership details are being queried.
      operationId: getMembership
      parameters:
      - name: ticket
        in: query
        required: true
        description: The unique identifier of the user's ticket.
        schema:
          type: string
          example: b4f99ee5-c1d2-4f0c-9a14-30f6fd7e9f5c
      - name: uri
        in: query
        required: true
        description: The unique identifier (URI) for which the membership details are being queried.
        schema:
          type: string
          example: v-ui:DefaultLanguage
      responses:
        '200':
          description: A successful response containing the membership details of the specified URI.
          content:
            application/json:
              schema:
                type: object
                properties:
                  '@':
                    type: string
                    example: "_"
                  'rdf:type':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: string
                        type:
                          type: string
                    example: [{"data": "v-s:Membership", "type": "Uri"}]
                  'v-s:memberOf':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: string
                        type:
                          type: string
                    example: [{"data": "v-s:AllResourcesGroup", "type": "Uri"}, {"data": "v-ui:DefaultLanguage", "type": "Uri"}, {"data": "cfg:TTLResourcesGroup", "type": "Uri"}]
                  'v-s:resource':
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          type: string
                        type:
                          type: string
                    example: [{"data": "v-ui:DefaultLanguage", "type": "Uri"}]
        '500':
          description: General server error indicating that the request could not be processed.

  /get_operation_state:
    get:
      summary: Get Operation State
      description: >
        This endpoint retrieves the state of a specified operation.
        It requires the module ID and the operation ID for which the state is being queried.
      operationId: getOperationState
      parameters:
      - name: module_id
        in: query
        required: true
        description: The module ID associated with the operation.
        schema:
          type: integer
          example: 4
      - name: wait_op_id
        in: query
        required: true
        description: The operation ID for which the state is being queried.
        schema:
          type: integer
          format: int64 # Long integer type
          example: 12374976
      responses:
        '200':
          description: A successful response containing the state of the specified operation.
          content:
            text/plain:
              schema:
                type: integer # Long integer type for the response
                format: int64
                example: 12374978
        '500':
          description: General server error indicating that the request could not be processed.

