openapi: '3.0.0'
info:
  title: Veda Platform HTTP Interface
  version: '1.0'
  description: API for interacting with the Veda platform services.

servers:
  - url: 'http://example.com/api'  # Replace with your actual API base path

paths:

 # Authentication endpoint to retrieve user ticket (session).
  /authenticate:
    get:
      summary: Authenticate a user
      description: Authenticates the user using login and password and returns authentication details.
      parameters:
        - name: login
          in: query
          required: true
          schema:
            type: string
          description: Login of the user.
        - name: password
          in: query
          required: true
          schema:
            type: string
          description: Hashed password of the user.
        - name: secret
          in: query
          schema:
            type: string
          description: Optional secret for additional security.
      responses:
        '200':
          description: Authentication was successful and user info is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_time:
                    type: integer
                  id:
                    type: string
                  result:
                    type: integer
                  user_uri:
                    type: string
        '472':
          description: Custom application error code indicating failure.
        '500':
          description: Server error.

  # Check if the provided ticket is still valid.
  /is_ticket_valid:
    get:
      summary: Check ticket validity
      description: Validates if the provided ticket is still active and valid.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket is confirmed to be valid.
        '472':
          description: Ticket is invalid or expired.
        '500':
          description: Server error while validating ticket.

  # Get a ticket trusted for use by another user, based on an existing ticket.
  /get_ticket_trusted:
    get:
      summary: Get ticket for another user by a trusted source
      description: Obtains a ticket for another user using an existing trusted ticket.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
        - name: login
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved a ticket for another user.
        '473':
          description: Failure in obtaining ticket due to permissions or other issues.
        '500':
          description: Server error.

  # Execute a full text search query against the stored data.
  /query:
    post:
      summary: Execute a full text search query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            description: Includes the search query and other optional parameters.
      responses:
        '200':
          description: Query results, possibly empty if no entities are found.
        '400':
          description: Bad request with sample content error.
        '500':
          description: Server error.

  # Retrieve information about a specific individual by URI.
  /get_individual:
    get:
      summary: Retrieve all data related to a single individual by its URI.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
          description: The session ticket of the user.
        - name: uri
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier (URI) of the individual.
        - name: reopen
          in: query
          schema:
            type: boolean
          description: An optional flag to indicate if the request should reopen the data.
      responses:
        '200':
          description: The detailed information of the individual entity.
        '473':
          description: Custom application error.
        '500':
          description: Server error.

  # Retrieve multiple individuals' data by a list of URIs.
  /get_individuals:
    post:
      summary: Get more individuals
      description: Retrieve multiple individuals' data by their URIs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:
                  type: string
                  description: The session ticket for authentication.
                uris:
                  type: array
                  items:
                    type: string
                  description: A list of URIs identifying the individuals to be fetched.
                reopen:
                  type: boolean
                  description: An optional flag to reopen the resources.
      responses:
        '200':
          description: List of individuals with their data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Server error.

  # Update or insert information about a specific individual.
  /put_individual:
    put:
      summary: Put one individual
      description: Create or update data for a single individual.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The data of the individual to be created or updated.
      responses:
        '200':
          description: Individual has been successfully put.
        '473':
          description: Custom error code indicating failure to put the individual.
        '500':
          description: Server error.

  /put_individuals:
    put:
      summary: Put multiple individuals
      description: Create or update data for multiple individuals.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
              description: An array of individuals to be created or updated.
      responses:
        '200':
          description: Individuals have been successfully put.
        '400':
          description: Bad request due to invalid data format or content.
        '500':
          description: Server error.

  /remove_individual:
    put:
      summary: Remove one individual
      description: Remove an individual by URI.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Data representing the individual to remove.
      responses:
        '200':
          description: Individual has been successfully removed.
        '473':
          description: Custom error code indicating failure to remove the individual.
        '500':
          description: Server error. 

  /remove_from_individual:
    put:
      summary: Remove field from individual
      description: Remove a field from an individual's data by URI and field details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Data representing the field to remove from the individual.
      responses:
        '200':
          description: Field has been successfully removed from the individual.
        '473':
          description: Custom error code indicating failure.
        '500':
          description: Server error. 

  /set_in_individual:
    put:
      summary: Set field into individual
      description: Set or replace a field for an individual by URI and the new field data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Data representing the field to set or replace in the individual.
      responses:
        '200':
          description: Field set or replaced successfully in the individual.
        '473':
          description: Custom error indicating failure to set the field.
        '500':
          description: Server error.

  # Add a field to an individual's data.
  /add_to_individual:
    put:
      summary: Add field into individual
      description: Add a new field to an individual's data by URI and new field details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Data representing the new field to add to the individual.
      responses:
        '200':
          description: Field added successfully to the individual.
        '473':
          description: Custom error indicating failure to add the field.
        '500':
          description: Server error.

  /get_rights:
    get:
      summary: Get access rights on uri
      description: Retrieve the access rights a user has for a particular URI.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
        - name: uri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the access rights.
        '500':
          description: Server error.

  /get_rights_origin:
    get:
      summary: Get origin of access rights on uri
      description: Retrieve the origin of access rights given to a user for a particular URI.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
        - name: uri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the origin of the access rights.
        '500':
          description: Server error.

  /get_membership:
    get:
      summary: Get membership of uri
      description: Retrieve the membership details related to a specific URI.
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            type: string
        - name: uri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the membership details.
        '500':
          description: Server error.

  /get_operation_state:
    get:
      summary: Get operation state
      description: Retrieve the state of an asynchronous operation.
      parameters:
        - name: module_id
          in: query
          required: true
          schema:
            type: integer
        - name: wait_op_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the operation state.
        '500':
          description: Server error.

